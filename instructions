Assignment 2

Due date: Feb 15, 2019 at 11:30pm.
Weight: 10% of the final grade
Note: this is an individual assignment, no group work is allowed

For this assignment you are to implement a simple calculator as a web application. 
Your calculator should behave as close as possible to the google calculator. 
You may style the calculator as you like

Your calculator should support the following features:
all numbers (0-9) as well as the decimal point (.)
equal sign - displaying the expression and the result, or error if expression is invalid
basic arithmetic operators (+, -, * and /)
the backspace button (CE)
left and right brackets
re-using the previously computed value in the next calculation
Your calculator should work in desktop mode and in mobile mode:
on desktop the calculator should be 600 pixels wide, and centered horizontally;
on mobile devices the calculator should be horizontally stretched across the whole screen.
You are allowed to use the following technologies in your implementation:
plain HTML, CSS, JavaScript
SCSS, LESS, Bootstrap, JQuery, JQuery UI
your calculator should not contain any server-side scripts
if you plan to use any other technology, please ask your instructor for permission first.
Your assignment must be publicly viewable. That means you must host it on a publicly available web server. 
We discussed some free hosting choices in the class.

Make sure your calculator works in Google Chrome (both in desktop mode and in Device Mode ).

Submission details for this assignment:

Create a ZIP file called assignment2.zip that contains:
all source files for your assignment
instructions.txt file that includes:
URL where your calculator is available
which browsers you used to test the assignment.
description of how to deploy your calculator
Upload the assignment2.zip file to D2L dropbox.

General information about all assignments:
All assignments are due on the date listed on the assignment.  
Late assignments or components of assignments will not be accepted for marking without approval for an extension beforehand. 
What you have submitted in D2L as of the due date is what will be marked.
Extensions may be granted for reasonable cases, but only by the course instructor, 
and only with the receipt of the appropriate documentation (e.g., a doctor's note). 
Typical examples of reasonable cases for an extension include: illness or a death in the family. 
Cases where extensions will not be granted include situations that are typical of student life, 
such as having multiple due dates, work commitments, etc. 
Forgetting to hand in your assignment on time is not a valid reason for getting an extension.
After you submit your work to D2L, make sure that you check the content of your submission. 
It's your responsibility to do this, so make sure that your submit your assignment with enough time before it is due 
so that you can double-check your upload, and possibly re-upload the assignment.

All assignments should include contact information, including full name, student ID and tutorial section, 
at the very top of each file submitted.
Assignments must reflect individual work.  Group work is not allowed for assignments, nor can you copy the work of others. 
For further information on plagiarism, cheating and other academic misconduct, check the information at this link: 

	http://www.ucalgary.ca/pubs/calendar/current/k-5.html.

You can and should submit many times before the due date. D2L will simply overwrite previous submissions with newer ones. 
Itâ€™s better to submit incomplete work for a chance of getting partial marks, than not to submit anything.
Only one file can be submitted per assignment. If you need to submit multiple files, you can put them into a single container. 
The container types supported will be ZIP and TAR. No other formats will be accepted.
Assignments will be marked by your TAs. If you have questions about assignment marking, contact your TA first. 
If you still have question after you have talked to your TA then you can contact your instructor.


Q: Are we expected to handle keyboard input? Or are we expected to simply handle the HTML button clicks on the calculator?

A: You do not need to handle keyboard events, only mouse clicks on the buttons.
